definitions:
  domain.CreateStoryInfoBody:
    properties:
      description:
        type: string
      img:
        type: string
      name:
        type: string
      sceneCount:
        type: integer
      tags:
        items:
          type: string
        type: array
    type: object
  domain.GetStoryResult:
    properties:
      datetime:
        type: string
      id:
        type: string
      sceneId:
        type: string
      storyId:
        type: string
      userId:
        type: string
    type: object
  domain.LikeStoryDTO:
    properties:
      isLiked:
        type: boolean
      storyId:
        type: string
      userId:
        type: string
    type: object
  domain.LikeStoryResponse:
    properties:
      isLiked:
        type: boolean
      likes:
        type: integer
      storyId:
        type: string
    type: object
  domain.Story:
    properties:
      author:
        type: string
      date:
        type: string
      description:
        type: string
      id:
        type: string
      img:
        type: string
      likes:
        type: integer
      name:
        type: string
      passes:
        type: integer
      sceneCount:
        type: integer
      tags:
        items:
          type: string
        type: array
    type: object
  handlers.BaseErrorResponse:
    properties:
      error:
        type: string
    type: object
  handlers.createResultBody:
    properties:
      sceneId:
        type: string
      storyId:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API for StoryQuests web site
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Story Quests API
  version: "1.0"
paths:
  /stories:
    get:
      description: Retrieves stories with optional filtering and pagination (default
        length is 10)
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: limit
        type: integer
      - default: created_at
        description: Sort field
        in: query
        name: sort
        type: string
      - default: desc
        description: Sort order
        enum:
        - asc
        - desc
        in: query
        name: order
        type: string
      - description: Search query
        in: query
        name: search
        type: string
      - description: Category filter
        in: query
        name: category
        type: string
      - description: Status filter
        enum:
        - active
        - inactive
        - draft
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Stories retrieved successfully
          schema:
            items:
              $ref: '#/definitions/domain.Story'
            type: array
        "400":
          description: Invalid filter parameters
          schema:
            $ref: '#/definitions/handlers.BaseErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.BaseErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Find stories
      tags:
      - Story
    post:
      consumes:
      - application/json
      description: Create story
      parameters:
      - description: Story info
        in: body
        name: storyInfo
        required: true
        schema:
          $ref: '#/definitions/domain.CreateStoryInfoBody'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
      summary: Create story
      tags:
      - Story
  /stories/{id}:
    get:
      description: Retrieves a specific story by its unique identifier
      parameters:
      - description: Story ID
        format: mongoId
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Story retrieved successfully
          schema:
            $ref: '#/definitions/domain.Story'
        "400":
          description: Invalid ID format or parameters
          schema:
            $ref: '#/definitions/handlers.BaseErrorResponse'
        "404":
          description: Story not found
          schema:
            $ref: '#/definitions/handlers.BaseErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.BaseErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get story by ID
      tags:
      - Story
  /stories/{id}/like:
    patch:
      consumes:
      - application/json
      description: Toggles like status for a story by authenticated user
      parameters:
      - description: Story ID
        format: mongoId
        in: path
        name: id
        required: true
        type: string
      - description: Like status
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/domain.LikeStoryDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Like status updated successfully
          schema:
            $ref: '#/definitions/domain.LikeStoryResponse'
        "400":
          description: Invalid story ID or request body
          schema:
            $ref: '#/definitions/handlers.BaseErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.BaseErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.BaseErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Like or unlike a story
      tags:
      - Story
  /stories/{id}/passes:
    patch:
      description: Increments the number of passes for a specific story
      parameters:
      - description: Story ID
        format: mongoId
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Passes counter incremented successfully
        "400":
          description: Invalid story ID
          schema:
            $ref: '#/definitions/handlers.BaseErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.BaseErrorResponse'
      summary: Increment story passes counter
      tags:
      - Story
  /stories/{id}/results:
    get:
      description: Retrieves all results for a specific story
      parameters:
      - description: Story ID
        format: mongoId
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Results retrieved successfully
          schema:
            items:
              $ref: '#/definitions/domain.GetStoryResult'
            type: array
        "400":
          description: Invalid story ID format
          schema:
            $ref: '#/definitions/handlers.BaseErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.BaseErrorResponse'
      summary: Get results by story ID
      tags:
      - Story
    put:
      consumes:
      - application/json
      description: Creates or updates a user's result for a specific story scene
      parameters:
      - description: Result data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/handlers.createResultBody'
      produces:
      - application/json
      responses:
        "201":
          description: Result created/updated successfully
          schema:
            $ref: '#/definitions/domain.GetStoryResult'
        "400":
          description: Invalid request body or ID format
          schema:
            $ref: '#/definitions/handlers.BaseErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.BaseErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.BaseErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create or update story result
      tags:
      - Story
  /stories/{id}/results/{user_id}:
    get:
      description: Retrieves a specific user's result for a particular story
      parameters:
      - description: Story ID
        format: mongoId
        in: path
        name: id
        required: true
        type: string
      - description: User ID
        format: mongoId
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User result retrieved successfully
          schema:
            $ref: '#/definitions/domain.GetStoryResult'
        "400":
          description: Invalid ID format
          schema:
            $ref: '#/definitions/handlers.BaseErrorResponse'
        "404":
          description: Result not found
          schema:
            $ref: '#/definitions/handlers.BaseErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.BaseErrorResponse'
      summary: Get user result for a story
      tags:
      - Story
swagger: "2.0"
